#!/usr/bin/env python3
# coding=utf-8

from sendto_silhouette import SendtoSilhouette, __version__
from inkex import Transform
from inkex.tester import TestCase
from inkex.tester.mock import Capture
from inkex.tester.svg import svg_file
from pytest import mark

# try:
#     from inkex import __version__ as __inkex_version__
# except:
#     __inkex_version__ = "1.1.0_or_smaller_needs_this_hotfix"


class SendtoSilhouetteTest(TestCase):
    """Tests for Inkscape Extensions"""

    effect_class = SendtoSilhouette

    def setUp(self):
        self.e = self.effect_class()


class ParameterTest(SendtoSilhouetteTest):
    def test_run_help(self):
        """Ensure we can run `--help`"""
        with Capture("stdout") as stdout:
            with self.assertRaises(SystemExit) as e:
                self.e.run(["--help"])
            self.assertIn("--help", stdout.getvalue())
            self.assertEqual(e.exception.code, 0)

    def test_run_version(self):
        """Ensure we can run `--help`"""
        with Capture("stdout") as stdout:
            with self.assertRaises(SystemExit) as e:
                self.e.run(["--version"])
            self.assertIn(__version__, stdout.getvalue())
            self.assertEqual(e.exception.code, 0)


class PlusTest(SendtoSilhouetteTest):
    source_file = "plus_with_duplicate.svg"

    def test_loading_duplicated_path_noscale(self):
        """Ensure we ...."""
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.recursivelyTraverseSvg(self.e.document.getroot())

        self.assertEqual(
            self.e.paths,
            [
                # First cross
                [(10, 0), (10, 20)],
                [(0, 10), (20, 10)],
                # Second cross, the clone
                [(30, 20), (30, 40)],
                [(20, 30), (40, 30)],
            ],
        )

    def test_loading_duplicated_path(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg(self.e.document.getroot())

        self.assertDeepAlmostEqual(
            self.e.paths,
            [
                # First cross
                [(20, 0), (20, 40)],
                [(0, 20), (40, 20)],
                # Second cross, the clone
                [(60, 40), (60, 80)],
                [(40, 60), (80, 60)],
            ],
        )


class PathAndCircleTest(SendtoSilhouetteTest):
    source_file = "lines_and_circle.test.svg"

    def test_pathpathd(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.assertEqual(
            str(self.e.svg.getElementById('path1').path),
            'M 107.95 88.9 V 190.5',
        )

    def test_circlepathd(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.assertEqual(
            str(self.e.svg.getElementById('circle1').path),
            'M 107.95 88.9 a 50.8 50.8 0 1 0 50.8 50.8 a 50.8 50.8 0 0 0 -50.8 -50.8 z',
        )

    def test_pathpath(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.assertDeepAlmostEqual(
            self.e.svg.getElementById('path1').path.to_superpath()[0][0][0],
            [107.95, 88.9],
        )

    def test_rectpath(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.assertDeepAlmostEqual(
            self.e.svg.getElementById('rect1').path.to_superpath()[0][0][0],
            [57.15, 88.9],
        )

    def test_circlepath(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.assertDeepAlmostEqual(
            self.e.svg.getElementById('circle1').path.to_superpath()[0][0][0],
            [107.95, 88.9],
        )

    def test_circlepath(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.assertDeepAlmostEqual(
            self.e.svg.getElementById('line1').path.to_superpath()[0][0][0],
            [107.95, 139.7],
        )

    def test_doctransform(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()

        self.assertAlmostEqual(
            self.e.docTransform.matrix[0][0],
            1,
        )

    def test_scale_path_and_circle(self):
        self.e.parse_arguments(["--smoothness=0.2", self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg(self.e.svg)

        self.assertDeepAlmostEqual(
            self.e.paths,
            [
                # Circle
                [(107.95, 88.9), (100.35669989460307, 89.46890069747383), (93.05429149611837, 91.1305138345161), (86.14399539022554, 93.81720597805798), (79.72703216260422, 97.46134369503068), (73.90462239893402, 101.9952935523654), (68.7779866848946, 107.35142211699329), (64.44834560616559, 113.46209595584557), (61.01691974842663, 120.25968163585341), (58.6366853115426, 127.49268505902963), (57.37730496934404, 134.87510253497442), (57.21502901845909, 142.2875362420002), (58.12610775551589, 149.6105883584193), (60.08679147714258, 156.72486106254414), (63.0733304799673, 163.51095653268703), (67.06197506061818, 169.8494769471604), (72.02897551572337, 175.6210244842766), (77.80052305283957, 180.5880249393818), (84.13904346731293, 184.57666952003268), (90.92513893745584, 187.56320852285742), (98.03941164158068, 189.5238922444841), (105.36246375799979, 190.4349709815409), (112.77489746502556, 190.27269503065597), (120.15731494097037, 189.0133146884574), (127.39031836414657, 186.63308025157335), (134.18790404415444, 183.20165439383436), (140.29857788300671, 178.8720133151054), (145.65470644763457, 173.745377601066), (150.1886563049693, 167.9229678373958), (153.832794021942, 161.5060046097745), (156.5194861654839, 154.59570850388164), (158.18109930252618, 147.29330010539695), (158.75, 139.70000000000002), (158.5014186468407, 134.67904416083695), (157.76487307920635, 129.74313202999622), (156.55416103486215, 124.92557429312075), (154.88308025157335, 120.25968163585341), (152.76542846710515, 115.77876474383714), (150.21500341922282, 111.51613430271479), (147.24560284569156, 107.50510099812922), (143.8710244842766, 103.77897551572336), (140.14489900187075, 100.40439715430841), (136.1338656972852, 97.43499658077715), (131.87123525616283, 94.88457153289481), (127.39031836414654, 92.76691974842662), (122.72442570687925, 91.0958389651378), (117.90686797000379, 89.88512692079361), (112.97095583916308, 89.14858135315926), (107.94999999999999, 88.89999999999998), (107.95, 88.9)],
                # First line
                [(107.95, 88.9), (107.95, 190.5)],
                # Second line
                [(57.15, 139.7), (158.75, 139.7)],
                # Rectangle
                [(57.15, 88.9), (158.75, 88.9), (158.75, 190.5), (57.150000000000006, 190.5), (57.15, 88.9)],
                # Line
                [(107.95, 139.7), (57.15, 88.9)],
            ],
        )

class TransformTest(SendtoSilhouetteTest):
    source_file = "composed_transform.test.svg"

    def test_loading_composed_transform_use(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg(self.e.svg)

        self.assertDeepAlmostEqual(
            self.e.paths,
            [
                # First rect
                [(20, 0), (40, 0), (40, 20), (20, 20), (20, 0)],
                # Second rect, the clone
                [(0, 20), (20, 20), (20, 40), (0, 40), (0, 20)],
                # Second rect, another clone
                [(10, 10), (30, 10), (30, 30), (10, 30), (10, 10)],
            ],
        )

    def test_loading_composed_transform_select_rect(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg([self.e.svg.getElementById("rect1")])

        self.assertDeepAlmostEqual(
            self.e.paths,
            [
                # First rect
                [(20, 0), (40, 0), (40, 20), (20, 20), (20, 0)],
            ],
        )

    def test_loading_composed_transform_select_use2(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg([self.e.svg.getElementById("u0")])

        self.assertDeepAlmostEqual(
            self.e.paths,
            [
                # Second rect, the clone
                [(0, 20), (20, 20), (20, 40), (0, 40), (0, 20)],
            ],
        )


#@mark.xfail(__inkex_version__[0:3] < "1.2", reason="earlier versions generate other curves")
class CurvesTest(SendtoSilhouetteTest):
    source_file = "curved_dashes.test.svg"

    def test_curves(self):
        self.e.parse_arguments(["--smoothness=0.2", self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg(self.e.document.getroot())

        self.assertDeepAlmostEqual(
            self.e.paths,
            [[(123.9, 111.46), (124.25984375, 112.09875), (123.92875000000001, 112.69999999999999), (122.54, 113.27999999999999), (121.18812500000001, 112.74921874999998), (120.36500000000001, 111.60624999999999), (120.05937500000002, 110.16515624999998), (120.26, 108.73999999999998), (120.78736328125001, 107.67357421874999), (121.52953125, 106.81421874999998), (123.47875, 105.71624999999999), (125.74859375000001, 105.44515624999998), (127.98, 105.99999999999999), (129.37380859375, 106.85513671874999), (130.48671875, 107.96609374999998), (131.31720703124998, 109.27744140624998), (131.86374999999998, 110.73374999999999), (132.09890625, 113.85953124999997), (131.78447265625, 115.41814453125), (131.18, 116.89999999999999), (130.00857421875003, 118.62160156249999), (128.53421875000004, 119.98906249999999), (126.82431640625002, 120.99886718749998), (124.94625000000002, 121.64749999999998), (122.96740234375001, 121.93144531249999), (120.95515625000002, 121.84718749999999), (118.97689453125001, 121.39121093749998), (117.10000000000001, 120.55999999999999), (115.044453125, 119.07474609374998), (113.41875, 117.23734374999998), (112.228046875, 115.12783203125), (111.4775, 112.82624999999999), (111.17226562500001, 110.41263671875), (111.31750000000001, 107.96703124999999), (111.91835937500001, 105.56947265624999), (112.98, 103.29999999999998), (114.77949218750001, 100.91337890624997), (116.9809375, 99.03078124999998), (119.49128906249999, 97.65935546874996), (122.2175, 96.80624999999998), (125.0665234375, 96.47861328124998), (127.94531250000001, 96.68359374999999), (130.76082031250002, 97.42833984374998), (133.42000000000002, 98.71999999999998), (136.14056640625, 100.83044921874998), (138.28140625, 103.39359374999998), (139.83373046875002, 106.30337890624997), (140.78875000000002, 109.45374999999999), (141.13767578125, 112.73865234374999), (140.87171875, 116.05203124999998), (139.98208984375, 119.28783203124999), (138.46, 122.33999999999999), (136.04146484375002, 125.39205078124998), (133.11796875, 127.79078124999998), (129.80892578125003, 129.52505859374997), (126.23375, 130.58374999999995), (122.51185546875, 130.95572265624997), (118.76265625, 130.62984374999996), (115.10556640625002, 129.59498046874998), (111.66000000000001, 127.83999999999999), (108.27400390625002, 125.11009765624999), (105.61703125000001, 121.82390625), (103.70185546875001, 118.11419921874999), (102.54125000000002, 114.11375), (102.14798828125002, 109.95533203125), (102.53484375000002, 105.77171874999999), (103.71458984375002, 101.69568359374998), (105.70000000000002, 97.85999999999999), (108.74126953125003, 94.13964843749999), (112.39015625000002, 91.22343749999999), (116.50052734375002, 89.12613281249997), (120.92625000000002, 87.86249999999998), (125.52119140625004, 87.44730468749998), (130.13921875000003, 87.89531249999999), (134.63419921875, 89.22128906249999), (138.86, 91.43999999999998), (142.91470703125003, 94.78933593749998), (146.09015625000004, 98.79843749999998), (148.36958984375005, 103.30769531249999), (149.73625000000004, 108.15749999999998), (150.17337890625004, 113.18824218749998), (149.66421875000003, 118.24031249999999), (148.19201171875002, 123.15410156249999), (145.74, 127.76999999999998)], [(78.0, 142.0), (96.0, 142.0), (96.0, 160.0), (78.0, 160.0), (78.0, 142.0)], [(90.0, 186.0), (84.9178700081989, 186.1567836567841), (80.0304313162997, 186.61470853707138), (75.40542998558402, 187.35513550576403), (71.11061207733351, 188.35942542776436), (67.21372365282984, 189.6089391679747), (63.78251077335465, 191.08503759129735), (60.88471950018957, 192.7690815626346), (58.588095894616245, 194.64243194688873), (56.995025602213545, 196.63577934697668), (56.15213324719876, 198.6703038482213), (56.0435233588112, 200.7131005391339), (56.65330046629016, 202.73126450822576), (57.96556909887495, 204.69189084400819), (59.96443378580488, 206.56207463499248), (62.633999056319254, 208.30891096968986), (65.95836943965737, 209.89949493661166), (69.82121621646742, 211.26835332975088), (74.06353302930393, 212.36758608819798), (78.60540795026573, 213.1906480181103), (83.36692905145163, 213.7309939256452), (93.22926208289113, 213.93735689821227), (98.17025015734238, 213.5902835755591), (103.01123670041306, 212.934313455158), (107.56080191931595, 211.9886449116866), (111.65062299256354, 210.79543674038334), (115.23543344920427, 209.3825843782465), (118.26996681828655, 207.7779832622744), (120.70895662885883, 206.00952882946538), (122.50713640996955, 204.10511651681776), (123.61923969066713, 202.09264176132987), (124.0, 200.0), (123.83362665339733, 198.61627201282906), (123.34066308450821, 197.25598126810917), (121.41190410538374, 194.64243194688873), (118.28760071365306, 192.232792918071), (114.04163056034261, 190.1005050633883), (108.8632171989704, 188.35216441202516), (103.01123670041306, 187.06568654484198), (96.66404549173484, 186.27149167108485), (90.0, 186.0), (90.0, 186.0)], [(150.0, 147.0), (146.18810609152635, 147.5708007844234), (142.77758697074518, 149.19089504006692), (139.97566588392974, 151.72182062049043), (137.9895660773533, 155.02511537925383), (137.05816859451718, 158.76528214477693), (137.24979135475803, 162.53617418620968), (138.51581291810186, 166.09335501820735), (140.80761184457486, 169.19238815542514), (143.90664498179265, 171.48418708189814), (147.46382581379032, 172.750208645242), (151.23471785522307, 172.94183140548284), (154.97488462074617, 172.01043392264674), (158.27817937950957, 170.0243341160703), (160.80910495993308, 167.22241302925485), (162.4291992155766, 163.81189390847368), (163.0, 160.0), (162.74790059113548, 157.4519826061014), (162.0104339226467, 155.02511537925386), (160.8158473316909, 152.7875934239231), (159.19238815542514, 150.8076118445749), (157.21240657607694, 149.18415266830914), (154.9748846207462, 147.9895660773533), (152.54801739389862, 147.25209940886452), (150.0, 147.0), (150.0, 147.0)]]
        )


# @mark.xfail(__inkex_version__[0:3] < '1.2', reason="earlier versions generate different curves")
class DashesTest(SendtoSilhouetteTest):
    source_file = "curved_dashes.test.svg"

    def test_curved_dashes(self):
        self.e.parse_arguments(["--smoothness=0.2", "--dashes=true", self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg(self.e.document.getroot())

        self.assertDeepAlmostEqual(
            self.e.paths,
            [[(123.9, 111.46), (124.25984375, 112.09875), (123.92875, 112.7), (122.54, 113.28), (121.216625, 112.7725), (120.395, 111.677)], [(122.587, 106.084), (123.874171875, 105.606390625), (125.255375, 105.433375), (126.650640625, 105.564671875), (127.98, 106.0), (128.895, 106.508)], [(132.105, 112.055), (131.9995, 114.533), (131.18, 116.9), (130.303, 118.262)], [(124.784, 121.685), (121.513375, 121.9075), (118.284, 121.134)], [(113.243, 116.983), (111.80425, 114.017125), (111.189, 110.767)], [(112.431, 104.33), (112.98, 103.3), (114.626625, 101.078075), (116.622, 99.2856)], [(122.667, 96.7185), (125.95175, 96.4845875), (129.238, 96.9547)], [(135.107, 99.9146), (137.462125, 102.279825), (139.245, 105.028)], [(141.066, 111.355), (141.06, 114.64975), (140.442, 117.913)], [(137.452, 123.781), (135.1685, 126.21975), (132.531, 128.162)], [(126.388, 130.553), (123.111375, 130.943125), (119.798, 130.791)], [(113.487, 128.878), (111.66, 127.84), (108.158, 124.993)], [(104.358, 119.6), (103.141125, 116.524), (102.402, 113.298)], [(102.381, 106.696), (103.092375, 103.48225), (104.289, 100.378)], [(107.991, 94.9152), (110.42525, 92.63915), (113.128, 90.7687)], [(119.228, 88.2407), (122.47625, 87.6254625), (125.786, 87.4495)], [(132.32, 88.421), (135.406625, 89.548875), (138.35, 91.1122)], [(143.43, 95.3336), (145.51025, 97.9288375), (147.214, 100.749)], [(149.488, 106.952), (150.0295, 110.21375), (150.169, 113.525)], [(149.237, 120.067), (148.180125, 123.183625), (146.722, 126.178)], [(78.0, 142.0), (78.9999, 142.0)], [(81.9995, 142.0), (83.9995, 142.0)], [(87.0006, 142.0), (89.0009, 142.0)], [(92.0008, 142.0), (94.0002, 142.0)], [(96.0, 143.0), (96.0, 145.001)], [(96.0, 148.0), (96.0, 150.001)], [(96.0, 153.0), (96.0, 155.001)], [(96.0, 158.001), (96.0, 160.0), (95.9992, 160.0)], [(92.9991, 160.0), (90.9999, 160.0)], [(88.0, 160.0), (85.9997, 160.0)], [(82.9992, 160.0), (80.999, 160.0)], [(78.0, 159.999), (78.0, 158.0)], [(78.0, 155.0), (78.0, 153.0)], [(78.0, 150.0), (78.0, 148.0)], [(78.0, 145.0), (78.0, 143.0)], [(90.0, 186.0), (89.3991, 186.002)], [(87.0006, 186.054), (85.8008, 186.107)], [(83.4066, 186.265), (82.2115, 186.372)], [(79.826, 186.641), (78.6379, 186.804)], [(76.2691, 187.192), (75.0908, 187.418)], [(72.7483, 187.936), (71.585, 188.231)], [(69.2812, 188.9), (68.1422, 189.276)], [(65.8977, 190.125), (64.7963, 190.603)], [(62.6533, 191.68), (61.62, 192.289)], [(59.6639, 193.678), (58.7632, 194.472)], [(57.2111, 196.295), (56.6188, 197.338)], [(56.0098, 199.644), (56.0609, 200.841)], [(56.8423, 203.097), (57.4937, 204.104)], [(59.1229, 205.862), (60.0471, 206.626)], [(62.0371, 207.965), (63.083, 208.554)], [(65.2439, 209.596), (65.9584, 209.899), (66.3509, 210.059)], [(68.6055, 210.881), (69.7476, 211.246)], [(72.0592, 211.893), (73.2252, 212.178)], [(75.572, 212.678), (76.7525, 212.894)], [(79.1236, 213.265), (80.3139, 213.42)], [(82.7007, 213.674), (83.8967, 213.773)], [(86.2928, 213.917), (87.4928, 213.962)], [(89.8918, 214.0), (91.0914, 213.993)], [(93.49, 213.927), (94.6879, 213.867)], [(97.0813, 213.694), (98.2757, 213.579)], [(100.658, 213.295), (101.846, 213.123)], [(104.212, 212.718), (105.389, 212.484)], [(107.727, 211.947), (108.887, 211.642)], [(111.186, 210.951), (112.322, 210.561)], [(114.555, 209.684), (115.649, 209.191)], [(117.774, 208.075), (118.795, 207.444)], [(120.713, 206.006), (121.585, 205.183)], [(123.05, 203.289), (123.575, 202.211)], [(123.998, 199.864), (123.848, 198.676)], [(122.908, 196.48), (122.203, 195.509)], [(120.505, 193.818), (119.558, 193.081)], [(117.538, 191.789), (116.482, 191.22)], [(114.305, 190.21), (114.042, 190.101), (113.193, 189.763)], [(110.928, 188.966), (109.782, 188.613)], [(107.464, 187.988), (106.296, 187.713)], [(103.945, 187.232), (102.763, 187.024)], [(100.389, 186.67), (99.1978, 186.522)], [(96.8101, 186.284), (95.6138, 186.192)], [(93.2176, 186.063), (92.0191, 186.025)], [(150.0, 147.0), (149.4, 147.014)], [(147.027, 147.344), (145.872, 147.672)], [(143.68, 148.64), (142.659, 149.271)], [(140.815, 150.8), (140.005, 151.686)], [(138.649, 153.662), (138.114, 154.735)], [(137.349, 157.006), (137.127, 158.184)], [(137.013, 160.579), (137.121, 161.773)], [(137.666, 164.108), (138.096, 165.227)], [(139.258, 167.323), (139.979, 168.282)], [(141.67, 169.981), (142.625, 170.706)], [(144.715, 171.878), (145.832, 172.314)], [(148.164, 172.87), (149.357, 172.984)], [(151.753, 172.882), (152.932, 172.666)], [(155.208, 171.911), (156.285, 171.38)], [(158.268, 170.033), (159.156, 169.229)], [(160.695, 167.391), (161.33, 166.374)], [(162.308, 164.186), (162.642, 163.034)], [(162.983, 160.663), (163.0, 160.0), (162.989, 159.463)], [(162.67, 157.089), (162.347, 155.933)], [(161.391, 153.735), (160.765, 152.711)], [(159.244, 150.859), (159.192, 150.808), (158.362, 150.046)], [(156.393, 148.68), (155.323, 148.14)], [(153.055, 147.364), (151.877, 147.136)]]
        )


# @mark.xfail(__inkex_version__[0:3] < '1.2', reason="earlier versions generate different curves")
class CutTest(SendtoSilhouetteTest):
    source_file = "testcut_square_triangle_o.svg"

    def testcut_square_triangle_o(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()

        self.e.initDocScale()
        self.e.recursivelyTraverseSvg(self.e.document.getroot())

        self.assertAlmostEqual(
            self.e.docTransform.matrix[0][0],
            0.2645833333333,
        )

        self.assertDeepAlmostEqual(
            self.e.paths,
            [
                [(0.0, -1.602173791666e-05), (9.37500770833, -1.602173791666e-05), (9.37500770833, 9.37499168659), (0.0, 9.37499168659), (0.0, -1.602173791666e-05)],
                [(1.876888020833, 0.934309895833), (1.876888020833, 3.356901041666), (2.339908854166, 3.28247375), (2.888472579752, 3.392885201822), (3.33808420572, 3.694039739583), (3.642074952799,  4.14081763671), (3.75377604166, 4.68809916666), (3.642074952799, 5.23536126627), (3.33808420572, 5.68212221354), (2.888472579752, 5.98326476236), (2.339908854166, 6.09367166666), (1.876888020833, 6.011015833333), (1.8768880208, 8.43359375), (8.43359375, 4.68809916666), (1.876888020833, 0.934309895833), (1.876888020833, 0.934309895833)]
            ]
        )

class SyncDetectRegmarks(SendtoSilhouetteTest):
    source_file = "detect_regmarks.svg"

    def test_detect_regmarks(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()
        self.e.detect_doc_regmark()
        self.assertEqual(self.e.doc_reg_x, 10.0)
        self.assertEqual(self.e.doc_reg_y, 10.0)
        self.assertEqual(self.e.doc_reg_width, 190.0)
        self.assertEqual(self.e.doc_reg_length, 277.0)

    def test_override_regmarks(self):
        self.e.parse_arguments([self.data_file(self.source_file), "--regoriginx=12.3", "--regoriginy=12.4", "--regwidth=12.5", "--reglength=12.6"])
        self.e.load_raw()
        self.e.clean_up()
        self.e.sync_regmark_settings()
        self.assertEqual(self.e.reg_origin_X, 12.3)
        self.assertEqual(self.e.reg_origin_Y, 12.4)
        self.assertEqual(self.e.reg_width,    12.5)
        self.assertEqual(self.e.reg_length,   12.6)

class SyncDetectRegmarksCorrupted(SendtoSilhouetteTest):
    source_file = "detect_regmarks_corrupted.svg"

    def test_detect_regmarks(self):
        self.e.parse_arguments([self.data_file(self.source_file)])
        self.e.load_raw()
        self.e.clean_up()
        self.e.detect_doc_regmark()
        self.assertEqual(self.e.doc_reg_x, 0.0)
        self.assertEqual(self.e.doc_reg_y, 0.0)
        self.assertEqual(self.e.doc_reg_width, 0.0)
        self.assertEqual(self.e.doc_reg_length, 0.0)

    def test_override_regmarks(self):
        self.e.parse_arguments([self.data_file(self.source_file), "--regoriginx=12.3", "--regoriginy=12.4", "--regwidth=12.5", "--reglength=12.6"])
        self.e.load_raw()
        self.e.clean_up()
        self.e.sync_regmark_settings()
        self.assertEqual(self.e.reg_origin_X, 12.3)
        self.assertEqual(self.e.reg_origin_Y, 12.4)
        self.assertEqual(self.e.reg_width,    12.5)
        self.assertEqual(self.e.reg_length,   12.6)

    def test_derived_regmarks(self):
        self.e.parse_arguments([self.data_file(self.source_file), "--regoriginx=10.0", "--regoriginy=10.0"])
        self.e.load_raw()
        self.e.clean_up()
        self.e.sync_regmark_settings()
        self.assertEqual(self.e.reg_origin_X, 10.0)
        self.assertEqual(self.e.reg_origin_Y, 10.0)
        self.assertEqual(self.e.reg_width,   190.0)
        self.assertEqual(self.e.reg_length,  277.0)

